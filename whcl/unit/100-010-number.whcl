decl i 0
# We cannot yet dereference literals, we need
# $i to get access to the numeric prototype(s).
assert [info is-integer $i]
assert 'integer' == [info type-name $i]
assert [info is-function $i[__command]]
assert [info is-function $i[compare]]
assert [info is-function $i[rand]]
assert [info is-integer $i[INT_MIN]]
assert [info is-integer $i[INT_MAX]]
assert $i[INT_MIN] < $i[INT_MAX]
assert $i[INT_MIN] - 1 == $i[INT_MAX]
assert $i[INT_MAX] + 1 == $i[INT_MIN]

assert 0 == [$i compare 0]
assert [$i compare 1] < 0
assert [$i compare -1] > 0
assert 0.0 == [$i to-double]
assert 0 == [$i to-double]
assert "0" == [$i to-json]
assert "0" == [$i to-string]
set i 42
assert '*' == [$i to-char]

decl d 0.0
assert 'double' == [info type-name $d]
assert 0 == [$d compare 0]
assert [$d compare 1] < 0
assert [$d compare -1] > 0;
assert 0 == [$d to-int]
assert 0.0 == [$d to-int]
assert "0.0" == [$d to-json]
assert "0.0" == [$d to-string]
set d 1.0
assert "1.0" == [$d to-string]
unset d

proc test-ceil {dbl result} {
    affirm $result == [$dbl ceil]
    incr dbl
    affirm $result != [$dbl ceil]
}
test-ceil 0.5 1
test-ceil -0.5 0
test-ceil 0.0 0
test-ceil -1.0 -1
test-ceil -1.01 -1
assert [catch { test-ceil -1.01 1 }]
test-ceil -0.999 0
test-ceil -2.2 -2
test-ceil 2.2 3
test-ceil 2.0 2
unset test-ceil

proc test-floor {dbl result} {
    affirm $result == [$dbl floor]
    incr dbl
    affirm $result != [$dbl floor]
}
test-floor 1.5 1
test-floor 1.0 1
test-floor 0.0 0
test-floor 0.5 0
test-floor -0.5 -1
test-floor -1.5 -2
unset test-floor

decl d 1
set $d[__prototype][twice] proc {} {return [expr this * 2]}
#echo "???" $d[__prototype][twice]
assert 2 == [$d twice]
incr d 2
assert 6 == [$d twice]
unset $d[__prototype][twice]
assert undefined == $d[__prototype][twice]

proc test-format {v fmt expect} {
    assert $expect == [$v to-string $fmt]
}

test-format 17 "04x" "0011"
test-format 0o765 "o" "765"

if {1} {; #parse-int/double/number
    decl N 0.0
    decl -const pi N.parse-int
    decl -const pf N.parse-double
    decl -const pn N.parse-number
    assert 1 == [pi 1]
    assert 1 == [pi '1']
    assert undefined == [pn '1_']
    assert undefined == [pi '1_']
    assert 1 == [pi '1.0']
    assert -1 == [pi '-1']
    assert -1 == [pi '-1.2']
    assert undefined == [pi '1-1']
    assert 1.0 == [pf 1]
    assert 1.0 == [pf '1']
    assert 1.0 == [pf true]
    assert 0.0 == [pf false]
    assert 0.0 == [pf '-0']
    assert 1 == [pn 1]
    assert 1 == [pn '1']
    assert 1.0 == [pn 1.0]
    assert 1.0 == [pn '1.0']
    assert 0 == [pn '-0']
    #assert 0.0 == [pn '  +   0.0']
    assert 56 == [pn '0o70']
    assert 56 == [pn '0o7_0']
    assert 56 == [pn '0o_7__0']
    assert undefined == [pn '0o1_']/*trailing non-digit*/
    assert undefined == [pn '0o18']/*trailing non-[octal-]digit*/
    assert -1 == [pn '-0o1']
    assert -1 == [pn '-0x0001']
    assert undefined == [pn '-0x0001.']/*trailing non-digit*/
    assert undefined == [pn pn]
    assert [pf '1'] == [pn '1.0']
    
    assert [info is-double [pn "1.3"]];# parse-number keeps the numeric type.
    assert [info is-integer [pn "1"]];# parse-number keeps the numeric type.
    assert [info is-integer [pi "1.3"]];# parse-int reduces to an integer
}
