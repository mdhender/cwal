########################################################################
# Array class tests
decl a array 1 2 3
assert 3 == [a length]
assert 1 == [a get-index 0]
assert 3 == [a get-index 2]
assert undefined == [a get-index 4]

assert 1 == [a shift]
assert 2 == [a length]
assert 4 == [a push 4]
assert 3 == [a length]
assert true == [a unset-index 2]
assert false == [a unset-index 2]
assert 2 == [a length]
assert 3 == $a[1]
assert 2 == $a[0]
a reverse
assert 2 == $a[1]
assert 3 == $a[0]

assert 6 == [a push 1 5 6]
assert 5 == [a length]

assert $a == [a sort]
assert 5 == [a length]

decl p -1
foreach v $a {
    assert $v > $p
    set p $v
}
unset p

a sort [proc -anon {x y} {
  if {$x == $y} {return 0
  } else if {$x < $y} {return 1
  } else { return -1 }
}]


decl p expr $a[0] + 1
foreach v $a {
    assert $v < $p
    set p $v
}
unset p

assert '6/5/3/2/1' == [a join '/']
assert 1 == [a index-of 5]
assert 0 > [a index-of 9]

assert '[6, 5, 3, 2, 1]' == [a to-string]
assert '[6, 5, 3, 2, 1]' == [a to-json]

a length 3
assert 3 == [a length]
assert 3 == $a[2]

foreach i v [a slice] {
    assert $a[$i] == $v
}
a pop
a push 4 3 2 1
decl a2 [a slice 1 3]
assert 3 == [a2 length]
assert 5 == $a2[0]
assert 4 == $a2[1]
assert 3 == $a2[2]

a sort // 1 2 3 4 5 6
set a2 [a slice -2]
assert 2 == [a2 length]
assert 5 == $a2[0]
assert 6 == $a2[1]
set a2 [a slice -3 1]
assert 1 == [a2 length]
assert 4 == $a2[0]
set a2 [a slice 1 0]
assert 0 == [a2 length]

set a2 [a slice -20]
assert 6 == [a2 length]

unset a a2

proc filter-even {v} {return ($v % 2)}
decl a array 1 2 3 4 5
decl b [a filter $filter-even]
affirm [info is-array $b]
affirm 3 == [b length]
affirm 1 == b.0
affirm 5 == b.2
set b  [a filter -v $filter-even]
affirm 2 == [b length]
affirm 2 == b.0
affirm 4 == b.1


decl t [new whcl.Tuple $a]
unset a b
decl b [t filter $filter-even]
affirm [info is-tuple $b]
affirm 3 == [b length]
affirm 1 == b.0
affirm 5 == b.2
set b  [t filter -v $filter-even]
affirm 2 == [b length]
affirm 2 == b.0
affirm 4 == b.1
incr b.1
assert 5 == b.1
unset b.0
assert undefined == b.0
unset t b

if {1} {
    # Sorting with alias array entries...
    proc cmp {l r} {
        echo l $l r $r
        return ($l - $r)
    }
    decl x 3
    decl a array (1 [alias x] 2)
    #echo __FLC a $a
    a.sort ;#$cmp
    #echo __FLC a $a
    assert 3 == $x
    assert 3 == a.2
    decr a.2 3
    assert 0 == $x
    assert 0 == a.2
    #echo __FLC a $a
    a.sort ;#$cmp
    #echo __FLC a $a
    assert $x == a.0
    assert 2 == a.2
    return
}
