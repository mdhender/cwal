#pragma trace-assert 2
decl a [

        array

        (

               1
               2
               3

               )
        ]
assert $a[0] == 1
assert $a[2] == 3
assert $a[0] < $a[1]
assert $a[1] > $a[0]
decl o [object {1 'int one' "1" 'string one' 1.0 "double one"}]
assert $o["1"] == "string one"
assert $o[1] != $o["1"]
# Numeric comparison is an exception to the type-strict compare rule:
assert 1.0 == 1
assert 1 + 4 == 1 + 2 * 2
assert "123" != 123
assert +"123" == 123
assert !(+"123" != 123)
assert -"123" == -123
assert +"-123" == -123
assert !(+"123" !=
                   123)

assert 1<<2>>1 == 2
# ^^^^ note that spaces between operators and operands are
# not strictly required.
assert 0b1001 | 0b1100 == 0b1101
assert 0b1001 ^ 0b1100 == 0b0101
decl -const MAX_INT [expr ~0 >> 1]
decl -const MIN_INT [expr $MAX_INT + 1]
# set MIN_INT 0 # will fail with a constness violation
assert $MAX_INT > 0
assert $MIN_INT < 0
assert $MIN_INT - 1 == $MAX_INT
assert $MAX_INT + 1 == $MIN_INT
#echo MAX_INT $MAX_INT
#echo MIN_INT $MIN_INT

assert -3 == -0b11
assert -3 == -0x3
assert -3 == -0o3

assert 1 || [exit "should have been skipped"]
assert !(0 && [exit "should have been skipped"])
# assert [expr 0 || [exit "should have been skipped"]]

assert 2 == (0 || 2) 
assert 3 == (3 || 1)
assert false == (false || false)
assert false == (true && false)
assert 0 == (true && 0)
assert 1 == (true && 1)
assert undefined == (undefined && true)
assert undefined == (true && undefined)
assert 3 == (1 && 3)
assert 0 == (1 && 0)
assert 2 == (1 && 2)
assert false == (1 && 0); # note that 0 and false will compare equal
assert false == 0; # false only equates to a single number, but...
assert true == 1; # true compares equal to any non-0 number!
assert true == 2; # Feature or bug, dunno, but that behavior
                  # is almost 10 years old, as of 2022-03.
assert true == -1
assert 2 == [
        expr
        1
        +
        1
]

# Numeric type of math is floating point if any part is floating
# point. That differs from the historical behavior of this code
# (derived from s2), where the LHS value's type is/was always used.
assert 2.1 == 1.1 + 1
assert 2.1 == 1 + 1.1
assert 2 != 2.1
assert 3.1 == 1 * 3.1
assert 3.1 == 3.1 * 1
assert [info is-double (10.0/1)]
assert [info is-double (10/1.0)]
assert [info is-integer (10/1)]
assert 3 == 10.5 % 7; # modulo is always integer in whcl

assert 1.0 == + 1.0
assert +1.0 == + 1.0; # +1.0 literal vs unary plus 1.0
assert -1.0 == - 1.0; # -1.0 literal vs unary minus 1.0
