/**
   This plugin is essentially identical to the dll plugin except that
   it always checks for s2[MODULE_NAME] before doing a DLL
   lookup. i.e., the following are functionally equivalent arguments
   for requireS2():

   1) "dll!moduleName?checkS2"
   2) "s2mod!moduleName"

   This plugin accommodates the convention that s2 loadable modules
   are, in practice, essentially always installed as s2[MODULE_NAME].
   e.g., the s2sh build process installs statically-compiled modules
   that way, and client code which loads DLLs "always" install them
   that way.

   This plugin uses s2.loadModule() to load s2 loadable modules from
   DLLs. Usage:

   s2mod!moduleName?options...

   The return value: it returns whatever the C-level module
   initialization code returned. In practice, that is normally
   an object which contains the module's functionality. It may
   also be a single function or any arbitrary value.

   Options:

   ACHTUNG: Be aware that caching will hold the first result from this
   plugin's load() call (and generically _not_ caching DLL results is
   dangerous), so any options provided to this function via a
   require() call here are only honored on the first call (per DLL
   name). On subsequent calls to load() the cached result will be
   returned without checking the passed-in options (if any).

   entryPoint=string: if set, it is used as the second param to
   s2.loadModule(). This is only necessary when compiling multiple
   modules into a single DLL. (Note, however, that the "requirement"
   that we cache DLL loads means that this option will be ignored for
   loads after the first ones, so it cannot currently be used to load
   multiple modules via the same DLL.)
*/
affirm s2;
affirm typeinfo(isfunction s2.loadModule);
affirm typeinfo(isfunction s2.getenv);
const mod = {
    cacheIt: true /* _not_ caching DLL-loaded resources is a
                     Really Bad Idea, as the DLL can change
                     between invocations, leaving us with
                     different binary signatures.
                  */,
    isVirtual: true /* so we can implement the s2[NAME] check. */,
    prefix: requireS2.pathFromEnv('S2_MODULE_PATH') ||| ['.'],
    suffix: requireS2.pathFromEnv('S2_MODULE_EXTENSIONS') ||| ['.so','.dll'],
    load: function(name,opt){
        affirm name && typeinfo(isstring name);
        if(const x = s2[name]) return x;
        const a = [0];
        if(opt && opt.entryPoint) a[] = opt.entryPoint;
        pf.suffix = this.suffix;
        pf.prefix = this.prefix;
        const fn = pf.search(name) ||| 
              throw "Cannot find DLL '%1$s' in search path %2$J with extensions %3$J.".
              applyFormat(basename, pf.prefix, pf.suffix);
        a[0] = fn;
        const rc = L.apply(L, a);
        affirm undefined !== rc;
        return rc;
    } using {s2, pf: requireS2.pf, L:s2.loadModule}
};

requireS2.home
    && mod.prefix.push( requireS2.home + s2.PathFinder.separator + 'dll'  );

return mod;
